/*
Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:

Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:

Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)
Example 2:

Input: [1,2,4,8]
Output: [1,2,4,8]
*/


class Solution {
    
    public:
    
    
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        
        int n = nums.size();
        
        if(n==0){
            
            vector<int> a;
            return a;
        }
        
        if(n==1){
            return nums;
        }
         
        
        sort(nums.begin(),nums.end());
        vector<int> count (n,1);
        vector<int> index (n,INT_MIN);
        int max_count = 0;
        
        for(int i=1;i<n;i++){
            
            for(int j=i-1;j>=0;j--){
                if(nums[i]%nums[j]==0){

                    if(count[j] + 1 > count[i]){
      
                        count[i] = count[j] + 1;
  
                        index[i] = j;
                    }
                }
            }

            if(count[i]>count[max_count]){

                max_count = i;
            }
        }
        
        
        vector<int> ans;
        
        int i = max_count;
        while(i>=0){
            
            ans.push_back(nums[i]);
            i = index[i];
        }
        
        return ans;
        
    }
};
